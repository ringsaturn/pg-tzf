name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pg_version: [13, 14, 15, 16]
      fail-fast: false

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install pgrx
        run: cargo install cargo-pgrx --version 0.14.1

      - name: Install PostgreSQL ${{ matrix.pg_version }}
        run: |
          sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get -y install postgresql-${{ matrix.pg_version }} postgresql-server-dev-${{ matrix.pg_version }}
          echo "PostgreSQL ${{ matrix.pg_version }} installed"
          sudo -u postgres /usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config --version
          echo "Created PostgreSQL ${{ matrix.pg_version }} bin directory:"
          ls -la /usr/lib/postgresql/${{ matrix.pg_version }}/bin/

      - name: Setup environment
        run: |
          echo "PATH=/usr/lib/postgresql/${{ matrix.pg_version }}/bin:$PATH" >> $GITHUB_ENV
          echo "LDFLAGS=-L/usr/lib/postgresql/${{ matrix.pg_version }}/lib" >> $GITHUB_ENV
          echo "CPPFLAGS=-I/usr/lib/postgresql/${{ matrix.pg_version }}/include" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=/usr/lib/postgresql/${{ matrix.pg_version }}/lib/pkgconfig" >> $GITHUB_ENV
          echo "PG${{ matrix.pg_version }}=/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config" >> $GITHUB_ENV
          echo "PG_CONFIG=/usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_config" >> $GITHUB_ENV

      - name: Stop PostgreSQL service
        run: sudo service postgresql stop || true

      - name: Remove existing data directory
        run: sudo rm -rf /var/lib/postgresql/${{ matrix.pg_version }}/main

      - name: Initialize database cluster
        run: sudo -u postgres /usr/lib/postgresql/${{ matrix.pg_version }}/bin/initdb -D /var/lib/postgresql/${{ matrix.pg_version }}/main

      - name: Start PostgreSQL
        run: sudo -u postgres /usr/lib/postgresql/${{ matrix.pg_version }}/bin/pg_ctl -D /var/lib/postgresql/${{ matrix.pg_version }}/main start
        
      - name: Create .pgrx directory
        run: mkdir -p $HOME/.pgrx

      - name: Initialize pgrx
        run: |
          # Verify pg_config paths
          which pg_config
          pg_config --version
          echo "PG${{ matrix.pg_version }} path: $PG${{ matrix.pg_version }}"
          echo "PG_CONFIG path: $PG_CONFIG"
          
          # Initialize pgrx with explicit pg_config path
          cargo pgrx init --pg${{ matrix.pg_version }}=$PG${{ matrix.pg_version }}
          
          # Check the config file that was created
          echo "Generated pgrx config:"
          cat $HOME/.pgrx/config.toml

      - name: Build
        run: cargo pgrx package

      - name: Set proper directory permissions
        run: |
          sudo mkdir -p /usr/share/postgresql/${{ matrix.pg_version }}/extension
          sudo chown -R $USER:$USER /usr/share/postgresql/${{ matrix.pg_version }}/extension
          sudo mkdir -p /usr/lib/postgresql/${{ matrix.pg_version }}/lib/postgresql
          sudo chown -R $USER:$USER /usr/lib/postgresql/${{ matrix.pg_version }}/lib/postgresql
          sudo chown -R $USER:$USER /usr/lib/postgresql/${{ matrix.pg_version }}/lib

      - name: Run tests
        run: cargo pgrx test pg${{ matrix.pg_version }}

      - name: Run pgbench
        run: |
          createdb -U postgres pgbench_test
          psql -U postgres -d pgbench_test -c "CREATE EXTENSION tzf_pg;"
          echo "Testing tzf_tzname function:"
          pgbench -U postgres -d pgbench_test -c 10 -T 10 -f pgbench/tzf_tzname.sql
          echo "Testing tzf_tzname_point function:"
          pgbench -U postgres -d pgbench_test -c 10 -T 10 -f pgbench/tzf_tzname_point.sql
